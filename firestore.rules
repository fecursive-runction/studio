/**
 * @fileoverview Firestore Security Rules for Cement Plant Monitoring App
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and data ownership,
 * while remaining flexible on data shapes during the prototyping phase.
 * Strict authorization checks are enforced, but data validation is minimized to allow rapid iteration.
 *
 * Data Structure:
 * - `/plant-metrics/live`: Stores the single, most recent live production metric for the entire plant. Public read access.
 * - `/production_metrics/{metricId}`: Stores historical production metrics. Public read access.
 * - `/users/{userId}`: Stores user profiles, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Public read access is granted for production metrics.
 * - User listing is disallowed.
 * - User profiles are private and only accessible to the user themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the single, most recent live production metric for the entire plant.
     * @path /plant-metrics/live
     * @allow (get, list) Any user can read live metrics.
     * @deny (create, update, delete) No one can create, update, or delete live metrics through the client.
     * @principle Public read access for live plant metrics.
     */
    match /plant-metrics/live {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read historical production metrics.
     * @path /production_metrics/{metricId}
     * @allow (get, list) Any user can read historical metrics.
     * @deny (create, update, delete) No one can create, update, or delete historical metrics through the client.
     * @principle Public read access for historical plant metrics.
     */
    match /production_metrics/{metricId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user profile.
     * @path /users/{userId}
     * @allow (create) A user can create their profile if the userId matches their auth.uid.
     * @allow (get, list) A user can read their own profile.
     * @allow (update, delete) A user can update or delete their own profile.
     * @deny (create) A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (get, list) A user cannot read other user's profiles.
     * @deny (update, delete) A user cannot update or delete other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
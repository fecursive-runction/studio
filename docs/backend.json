{
  "entities": {
    "SensorReading": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SensorReading",
      "type": "object",
      "description": "Represents a single sensor reading from the cement plant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sensor reading."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the sensor reading.",
          "format": "date-time"
        },
        "plantId": {
          "type": "string",
          "description": "Reference to Plant. (Relationship: Plant 1:N SensorReading)"
        },
        "sensorId": {
          "type": "string",
          "description": "Identifier of the sensor that generated the reading."
        },
        "value": {
          "type": "number",
          "description": "The value of the sensor reading."
        }
      },
      "required": [
        "id",
        "timestamp",
        "plantId",
        "sensorId",
        "value"
      ]
    },
    "RawMaterialBatch": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RawMaterialBatch",
      "type": "object",
      "description": "Represents a batch of raw materials used in the cement production process.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the raw material batch."
        },
        "analysisTimestamp": {
          "type": "string",
          "description": "The timestamp of the raw material analysis.",
          "format": "date-time"
        },
        "plantId": {
          "type": "string",
          "description": "Reference to Plant. (Relationship: Plant 1:N RawMaterialBatch)"
        },
        "batchId": {
          "type": "string",
          "description": "Identifier of the raw material batch."
        },
        "composition": {
          "type": "string",
          "description": "Chemical composition of the raw material batch as JSON string."
        }
      },
      "required": [
        "id",
        "analysisTimestamp",
        "plantId",
        "batchId",
        "composition"
      ]
    },
    "ProductionMetric": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProductionMetric",
      "type": "object",
      "description": "Represents aggregated production metrics for the cement plant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the production metric record."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the production metric.",
          "format": "date-time"
        },
        "plantId": {
          "type": "string",
          "description": "Reference to Plant. (Relationship: Plant 1:N ProductionMetric)"
        },
        "productionRateTph": {
          "type": "number",
          "description": "Production rate in tons per hour."
        },
        "energyPerTonKwh": {
          "type": "number",
          "description": "Energy consumption per ton of production in kilowatt-hours."
        },
        "clinkerQualityScore": {
          "type": "number",
          "description": "Quality score of the produced clinker."
        }
      },
      "required": [
        "id",
        "timestamp",
        "plantId",
        "productionRateTph",
        "energyPerTonKwh",
        "clinkerQualityScore"
      ]
    },
    "AiRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiRecommendation",
      "type": "object",
      "description": "Represents an AI-generated recommendation for optimizing cement production.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI recommendation."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the AI recommendation.",
          "format": "date-time"
        },
        "plantId": {
          "type": "string",
          "description": "Reference to Plant. (Relationship: Plant 1:N AiRecommendation)"
        },
        "parameters": {
          "type": "string",
          "description": "Suggested parameters as JSON string."
        },
        "predictedOutcomes": {
          "type": "string",
          "description": "Predicted outcomes as JSON string."
        },
        "implementationStatus": {
          "type": "string",
          "description": "The implementation status of the AI recommendation."
        },
        "actualOutcomes": {
          "type": "string",
          "description": "Actual outcomes after implementing the recommendation, as JSON string."
        }
      },
      "required": [
        "id",
        "timestamp",
        "plantId",
        "parameters",
        "predictedOutcomes",
        "implementationStatus"
      ]
    },
    "Plant": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Plant",
      "type": "object",
      "description": "Represents a cement plant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the cement plant."
        },
        "name": {
          "type": "string",
          "description": "The name of the cement plant."
        },
        "location": {
          "type": "string",
          "description": "The location of the cement plant."
        },
        "type": {
          "type": "string",
          "description": "The type of the cement plant (e.g., Integrated Dry Process)."
        },
        "productionCapacityTpd": {
          "type": "number",
          "description": "The production capacity of the cement plant in tons per day."
        },
        "commissionedDate": {
          "type": "string",
          "description": "The date when the cement plant was commissioned.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "location",
        "type",
        "productionCapacityTpd",
        "commissionedDate"
      ]
    },
    "Alert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Alert",
      "type": "object",
      "description": "Represents an alert generated by the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the alert."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the alert.",
          "format": "date-time"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the alert (e.g., CRITICAL, WARNING)."
        },
        "message": {
          "type": "string",
          "description": "The message of the alert."
        },
        "sensorId": {
          "type": "string",
          "description": "The ID of the sensor that triggered the alert."
        },
        "value": {
          "type": "number",
          "description": "The value of the sensor at the time of the alert."
        },
        "status": {
          "type": "string",
          "description": "The status of the alert (e.g., new, acknowledged)."
        },
        "plantId": {
          "type": "string",
          "description": "Reference to Plant. (Relationship: Plant 1:N Alert)"
        }
      },
      "required": [
        "id",
        "timestamp",
        "severity",
        "message",
        "sensorId",
        "value",
        "status",
        "plantId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., operator, engineer, admin)."
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp when the user was created.",
          "format": "date-time"
        },
        "plantIds": {
          "type": "array",
          "description": "References to Plants. (Relationship: User N:N Plant)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "role",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/plants/{plantId}",
        "definition": {
          "entityName": "Plant",
          "schema": {
            "$ref": "#/backend/entities/Plant"
          },
          "description": "Stores plant-specific information.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            }
          ]
        }
      },
      {
        "path": "/plants/{plantId}/sensorReadings/{sensorReadingId}",
        "definition": {
          "entityName": "SensorReading",
          "schema": {
            "$ref": "#/backend/entities/SensorReading"
          },
          "description": "Stores sensor readings associated with a plant.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            },
            {
              "name": "sensorReadingId",
              "description": "The unique identifier for the sensor reading."
            }
          ]
        }
      },
      {
        "path": "/plants/{plantId}/rawMaterialBatches/{rawMaterialBatchId}",
        "definition": {
          "entityName": "RawMaterialBatch",
          "schema": {
            "$ref": "#/backend/entities/RawMaterialBatch"
          },
          "description": "Stores raw material batch information associated with a plant.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            },
            {
              "name": "rawMaterialBatchId",
              "description": "The unique identifier for the raw material batch."
            }
          ]
        }
      },
      {
        "path": "/plants/{plantId}/productionMetrics/{productionMetricId}",
        "definition": {
          "entityName": "ProductionMetric",
          "schema": {
            "$ref": "#/backend/entities/ProductionMetric"
          },
          "description": "Stores aggregated production metrics for a plant.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            },
            {
              "name": "productionMetricId",
              "description": "The unique identifier for the production metric record."
            }
          ]
        }
      },
      {
        "path": "/plants/{plantId}/aiRecommendations/{aiRecommendationId}",
        "definition": {
          "entityName": "AiRecommendation",
          "schema": {
            "$ref": "#/backend/entities/AiRecommendation"
          },
          "description": "Stores AI-generated recommendations for a plant.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            },
            {
              "name": "aiRecommendationId",
              "description": "The unique identifier for the AI recommendation."
            }
          ]
        }
      },
      {
        "path": "/plants/{plantId}/alerts/{alertId}",
        "definition": {
          "entityName": "Alert",
          "schema": {
            "$ref": "#/backend/entities/Alert"
          },
          "description": "Stores alerts generated for a plant.",
          "params": [
            {
              "name": "plantId",
              "description": "The unique identifier for the cement plant."
            },
            {
              "name": "alertId",
              "description": "The unique identifier for the alert."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Includes denormalized 'plantIds' array for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Autonomous Cement Plant GenAI Platform PoC, prioritizing real-time data access and AI-driven optimization. Key considerations include:\n\n1.  **Authorization Independence:** The structure avoids hierarchical authorization dependencies, eliminating `get()` calls in security rules by denormalizing authorization data where needed. This is especially relevant for the User-Plant relationship.  We store `plantIds` on the `User` document enabling rules to validate the user's access to relevant Plant-scoped data.\n\n2.  **Structural Segregation:**  Data with differing access requirements are stored in separate collections, simplifying security rule design.\n\n3.  **Access Modeling:** Path-based ownership is used for user-specific data (`/users/{userId}`) while plant-scoped data is organized under `/plants/{plantId}`.  This enforces clear ownership semantics.\n\n4.  **QAPs:** The data structure is designed to support secure list operations.  Specifically, alerts are scoped to a plant via the `plantId` field, enabling list operations filtered by `plantId`.\n\nExplanation of Paths:\n\n*   `/plants/{plantId}`: Stores plant-specific information. Most data is scoped to a plant. The root-level `plants` collection enables listing all plants, useful for administrative interfaces.\n*   `/plants/{plantId}/sensorReadings/{sensorReadingId}`: Stores sensor readings associated with a plant.\n*   `/plants/{plantId}/rawMaterialBatches/{rawMaterialBatchId}`: Stores raw material batch information associated with a plant.\n*   `/plants/{plantId}/productionMetrics/{productionMetricId}`: Stores aggregated production metrics for a plant.\n*   `/plants/{plantId}/aiRecommendations/{aiRecommendationId}`: Stores AI-generated recommendations for a plant.\n*   `/plants/{plantId}/alerts/{alertId}`: Stores alerts generated for a plant.\n*   `/users/{userId}`: Stores user profiles. The `plantIds` array contains the IDs of the plants that the user is authorized to access. This denormalization is crucial for authorization independence, allowing security rules to determine a user's plant access without needing to `get()` the plant document.\n"
  }
}